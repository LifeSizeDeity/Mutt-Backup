
# All customizations are documented in globals.cfg. Just copy a variable from
# there into the section below, and change the value to meet your needs.

[gcode_macro _km_options]
# These are examples of some likely customizations:
# Any sheets in the below list will be available with a configurable offset.
#variable_bed_surfaces: ['smooth_1','texture_1']
# Length (in mm) of filament to load (bowden tubes will be longer).
#variable_load_length: 90.0
# Hide the Octoprint LCD menu since I don't use it.
#variable_menu_show_octoprint: False
# Customize the filament menus (up to 10 entries).
variable_menu_temperature: [
  {'name' : 'PLA',  'extruder' : 215.0, 'bed' : 60.0},
  {'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
  {'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]
# Minimum printable XY coordinate. Defaults to X and Y position_min.
#variable_print_min: (0, 0) # example: (0, 0)
# Maximum printable XY coordinate. Defaults to X and Y position_max.
#variable_print_max: (220, 220) # example: (220, 220)
# Length of filament (in millimeters) to purge at print start.
variable_start_purge_length: 30 # This value works for most setups.
# Final Z position of toolhead in PRINT_END. Defaults to print_max Z.
#variable_start_end_park_z: 150
gcode: # This line is required by Klipper.
# Any code you put here will run at klipper startup, after the initialization
# for these macros. For example, you could uncomment the following line to
# automatically adjust your bed surface offsets to account for any changes made
# to your Z endstop or probe offset.
#  ADJUST_SURFACE_OFFSETS

# This line includes all the standard macros.
[include klipper-macros/*.cfg]
# Uncomment to include features that require specific hardware support.
# LCD menu support for features like bed surface selection and pause next layer.
#[include klipper-macros/optional/lcd_menus.cfg]
# Optimized bed leveling
[include klipper-macros/optional/bed_mesh.cfg]

# The sections below here are required for the macros to work. If your config
# already has some of these sections you should merge the duplicates into one
# (or if they are identical just remove one of them).
[idle_timeout]
gcode:
  _KM_IDLE_TIMEOUT # This line must be in your idle_timeout section.

[pause_resume]

[respond]

[save_variables]
filename: ~/printer_data/config/variables.cfg

[virtual_sdcard]
path: ~/printer_data/gcodes

[display_status]

[gcode_macro _PRINT_START_PHASE_PROBING]
rename_existing: CUSTOM_PRINT_START_PHASE_PROBING
description: Inserted by slicer at start of print. Performs probing (including
  mesh bed level) and other operations that should be run when the bed and
  chamber are stabilized at their target temps.
  Usage: See PRINT_START.
gcode:
  _PRINT_START_PHASE_CHECK PHASE=probing
  {% set print = printer["gcode_macro print_start_set"].print %}
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set MESH_MIN = print.MESH_MIN|default(None) %}
  {% set MESH_MAX = print.MESH_MAX|default(None) %}
  # Randomize the placement of the print on the bed.
  {% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}
    {% set PRINT_MIN = print.PRINT_MIN.split(",")|map('float')|list %}
    {% set PRINT_MAX = print.PRINT_MAX.split(",")|map('float')|list %}
    {% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +
         PRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,
         km.start_random_placement_max * 2)|min, 0)|max %}
    {% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +
         PRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,
         km.start_random_placement_max * 2)|min, 0)|max %}
    {% if x_offset > 0 %}
      {% set x_offset = range(x_offset)|random + km.print_min[0] -
                          PRINT_MIN[0] + km.start_random_placement_padding %}
    {% endif %}
    {% if y_offset > 0 %}
      {% set y_offset = range(y_offset)|random + km.print_min[1] -
                          PRINT_MIN[1] + km.start_random_placement_padding %}
    {% endif %}
    # This MESH_MIN/MESH_MAX gets passed to BED_MESH_CALIBRATE below, but the
    # rest of the macros rely on SET_GCODE_OFFSET performing the adjustment.
    {% set MESH_MIN = MESH_MIN.split(",")|map('float')|list %}
    {% set MESH_MAX = MESH_MAX.split(",")|map('float')|list %}
    {% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}
    {% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}
    {action_respond_info(
       "Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +
       "to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}
    {% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(',') %}
    {% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(',') %}
    PRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}
  {% endif %}

  {% set EXTRUDER = print.EXTRUDER|int %}
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set start_level_bed_at_temp = km.start_level_bed_at_temp and
                                   not printer.bed_mesh.profile_name %}
  {% set start_home_z_at_temp = km.start_home_z_at_temp and
                                not print.BED_AT_TARGET|int %}
  {% set actions_at_temp = start_level_bed_at_temp or
                           km.start_quad_gantry_level_at_temp or
                           km.start_z_tilt_adjust_at_temp or
                           start_home_z_at_temp %}
  {% if actions_at_temp %}
    {% if km.start_extruder_probing_temp > 0 %}
      _KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2
      M109 R{km.start_extruder_probing_temp}
    {% endif %}
    {% if km.start_home_z_at_temp and not bed_at_target %}
      G28 Z # Re-home only the Z axis now that the bed has stabilized.
    {% endif %}
    {% if km.start_z_tilt_adjust_at_temp %}
      Z_TILT_ADJUST
    {% endif %}
    {% if km.start_quad_gantry_level_at_temp %}
      QUAD_GANTRY_LEVEL
    {% endif %}
    {% if start_level_bed_at_temp %}
      _km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
                       %}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
    {% endif %}
    G4
  {% endif %}
  PRINT_START_SET PRINT_START_PHASE="extruder"

[gcode_macro _PRINT_START_PHASE_EXTRUDER]
rename_existing: CUSTOM_PRINT_START_PHASE_EXTRUDER
description: This doesn't do much. I added it for an easy transition.
  Usage: See PRINT_START.
gcode:
  _PRINT_START_PHASE_CHECK PHASE=extruder
  #{% set settings = printer["gcode_macro print_start_set"].settings %}
  #{% if settings.PRINT_START_PHASE != "extruder" %}
  #  { action_raise_error("Error in PRINT_START_PHASE: %s" %
  #                         (settings.PRINT_START_PHASE,)) }
  #{% endif %}
  #{% set EXTRUDER = settings.EXTRUDER|default(settings.EXTRUDER_TEMP)|float %}
  #{% set km = printer["gcode_macro _km_globals"] %}
  # Wait for extruder to reach temperature
  #_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
  #M109 S{EXTRUDER}
  # apply Z offset for bed surface (just in case it was reset).
  _KM_APPLY_PRINT_OFFSET
  _APPLY_BED_SURFACE_OFFSET
  PRINT_START_SET PRINT_START_PHASE="purge"
  

[gcode_macro _PRINT_START_PHASE_PURGE]
rename_existing: CUSTOM_PRINT_START_PHASE_PURGE
description: Inserted by slicer at start of print. Generates purge lines.
  Usage: See PRINT_START.
gcode:
  _PRINT_START_PHASE_CHECK PHASE=purge
  {% set print = printer["gcode_macro print_start_set"].print %}
  {% set MESH_MIN = print.MESH_MIN|default(None) %}
  {% set MESH_MAX = print.MESH_MAX|default(None) %}
  {% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|
         default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
  {% set km = printer["gcode_macro _km_globals"] %}
  #{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}
  #  DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
  #                  }"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
  #                  %}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}

  {% if km.start_purge_length > 0.0 %}
    DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
                    }"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
                    %}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
  {% endif %}

  PRINT_START_SET PRINT_START_PHASE="printing"

[gcode_macro DRAW_PURGE_LINE]
rename_existing: CUSTOM_DRAW_PURGE_LINE
description: Purges the specified length of filament as a line (or rows of
  lines) in front of the supplied print area. If no print area is specified the
  purge lines are drawn at the front edge of the maximum printable area. If no
  printable area is set it defaults to the XY axis limits.
  Usage: CUSTOM_DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
                         [WIDTH=<mm>] [LENGTH=<mm>]
gcode:
  # TODO: Make this work for delta printers.
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set origin = printer.gcode_move.homing_origin %}
  {% set dummy = km.__setitem__('print_min', (km.print_min[0] - origin.x,
                                              km.print_min[1] - origin.y)) %}
  {% set dummy = km.__setitem__('print_max', (km.print_max[0] - origin.x,
                                              km.print_max[1] - origin.y)) %}

  {% if "PRINT_MIN" in params %}
    {% set PRINT_MIN = (
        (params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,
        (params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max
      ) %}
  {% else %}
    {% set PRINT_MIN = km.print_min %}
  {% endif %}
  {% if "PRINT_MAX" in params %}
    {% set PRINT_MAX = (
        (params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,
        (params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min
      ) %}
  {% else %}
    {% set PRINT_MAX = km.print_max %}
  {% endif %}
  {% set extruder = printer.toolhead.extruder|string %}
  {% set HEIGHT = params.HEIGHT|default(
    printer.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}
  {% set WIDTH = params.WIDTH|default(
    printer.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}
  {% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}

  {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% set filament_area = 3.14159 *
       (printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
  {% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
  {% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
  {% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
  {% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
  {% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
  {% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
  # This will purge into the print area when the bed is filled to the front.
  {% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -
                                       (purge_rows + 0.5) * WIDTH )|max %}
  {% set print = printer["gcode_macro print_start_set"].print %}
  {% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}
  G90
  # Jog to the front left corner to get strings out of the print area.
  G1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{
    "%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}
  # Move to the starting corner.
  G1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{
    "%.4f" % HEIGHT} F{km.travel_speed_xy}
  # Wait until extruder is at final temp
  M109 S{EXTRUDER}
  # Prime the extruder before beginning the purge lines.
  G92 E0.0
  G1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}
  G92 E0.0
  # Purge.
  G1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}
  {% for n in range(purge_rows - 1) %}
    {% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
    DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
      WIDTH * n + y_start}"
    DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
      WIDTH * (n + 1) + y_start}"
  {% endfor %}
  {% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
  DRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{
    WIDTH * (purge_rows - 1) + y_start}"
  G92 E0.0

[gcode_macro PRINT_END]
rename_existing: CUSTOM_PRINT_END
description: Inserted by slicer at end of print.
  Usage: PRINT_END
gcode:
  _KM_CHECK_IS_PRINTING
  M400
  _PRINT_END_INNER

  {% set km = printer["gcode_macro _km_globals"] %}

 {% if km.start_clear_adjustments_at_end != 0 %}
    RESET_HEATER_SCALING
    RESET_FAN_SCALING
    M220 S100
    M221 S100
  {% endif %}
  _RESET_LAYER_GCODE
  _RESET_VELOCITY_LIMITS
  TURN_OFF_HEATERS
  M107; turn off fan
  BED_MESH_CLEAR
 # Park the toolhead and present the bed
  {% if printer.toolhead.homed_axes|lower == "xyz" %}
    PARK Y="{km.start_end_park_y}"
    PARK Z="150.0"
  {% endif %}
  M84 ; disable steppers
  CLEAR_PAUSE
  SET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"

[gcode_macro TURN_ON_CHAMBER_FILTER_FAN]
gcode:
  SET_FAN_SPEED FAN=CHAMBER_FILTER_FAN_1 SPEED=1.0
  SET_FAN_SPEED FAN=CHAMBER_FILTER_FAN_2 SPEED=1.0

[gcode_macro TURN_OFF_CHAMBER_FILTER_FAN]
gcode:
  SET_FAN_SPEED FAN=CHAMBER_FILTER_FAN_1 SPEED=0.0
  SET_FAN_SPEED FAN=CHAMBER_FILTER_FAN_2 SPEED=0.0

[gcode_macro UPDATE_GIT]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash /home/pi/klipper-backup/script.sh
timeout: 90.0
verbose: True
  
